#!/usr/bin/env ruby
require 'gli'

begin # XXX: Remove this begin/rescue before distributing your app
require 'paani'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/paani` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/paani now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Paani::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe find here'
arg_name 'id'
command :find do |c|
  c.action do |global_options,options,args|
  	id = args.shift
    dao = Dao.new
    ws = dao.find_water_sample(id)
    puts ws
   	end
end

desc 'Describe factor here'
arg_name 'water_sample_id factor_weight_id'
command :factor do |c|
  c.action do |global_options,options,args|
    water_sample_id = args.shift
    factor_weight_id = args.shift
    dao = Dao.new
    fw = dao.find_factor_weight(factor_weight_id)
    if fw
    	ws = dao.find_water_sample(water_sample_id)
    	if ws
    		puts ws.factor(fw)
    	else
    		puts "Specified water_sample_id [#{water_sample_id}] does not match any known water sample"
    	end
    else
    	puts "Specified factor_weight_id [#{factor_weight_id}] does not match any known factor weight"
    end
  end
end

desc 'Describe to_hash here'
arg_name 'Describe arguments to to_hash here'
command :to_hash do |c|
  c.action do |global_options,options,args|
    puts "to_hash command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
